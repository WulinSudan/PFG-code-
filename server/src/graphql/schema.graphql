  
  type Query {
    me: User
    personCount: Int!
    allPersons: [Person]!
    allUsers: [User]!
    findPerson(name: String!): Person
    allAccount: [Account]!
    countAccount: Int!
  }

  type Mutation {
    signUp(input: SignUpInput!): User!
    loginUser(input: LoginInput!): AuthToken!
    signup(name: String!, password:String!): User!
    removeUser(name: String!): Int!

    addPerson(name: String!, phone: Int!, street: String!, city: String!): Person!
    editNumber(name: String!, phone: Int!): Person
    removePerson(name: String!): Int!

    addAccount(owner: String!, number_account: String!, balance: Float!, active: Boolean!): Account!
    removeAccount(number_account:String!):Int!
  }

  type Address {
    street: String!
    city: String!
  }

  type Person {
    name: String!
    phone: Int!
    address: Address!
  }

  type Account {
    owner: String!
    number_account: String!
    balance: Float!
    active: Boolean!
  }


  type User {
    name: String!
    password: String!
  }

  type Token {
    value: String!
  }

  type AuthToken {
    access_token: String!
    user: User!
  }
  
  input RegisterInput{
    name: String!
    password: String!
  }
  
  input SignUpInput {
    name: String
    password: String
  }

  input LoginInput {
    name: String!
    password: String!
  }






