  
  type Query {

    me: User

    personCount: Int!
    allPersons: [Person]!
    findPerson(name: String!): Person

    allUsers: [User]!
    allAccount: [Account]!
    countAccount: Int!
    user(dni: String!): User
    users: [User]
    getAllAccounts:[Account]
    getUserAccountCount(dni: String!): Int!
    getUserAccountsInfoByDni(dni: String!): [Account]
    getAccountTransactions(n_account:String!):[Transaction]
    getTransactions:[Transaction]
    findAccount(accountNumber:String!):Account
     
    getOrigenAccount(qrtext:String!):String
  
    getAccountPayKey(accountNumber:String!): String!

    checkEnable(qrtext:String!): Boolean!

  }

  type Mutation {

    addTransaction(input: TransactionInput!): Transaction!
    
    setQrUsed(qrtext:String!): Boolean!
    setMaxPayImport(accountNumber:String!, maxImport:Float!): Float!

    logoutUser: LogoutResponse!

    setNewKey(accountNumber:String!): String!
    addDictionary(input: DictionaryInput!): Dictionary!

    signUp(input: SignUpInput!): User!
    loginUser(input: LoginInput!): AuthToken!
    removeUser(name: String!): Int!
    addNewAdmin(input: AddNewAdminInput!): User!

    addPerson(name: String!, phone: Int!, street: String!, city: String!): Person!
    editNumber(name: String!, phone: Int!): Person
    removePerson(name: String!): Int!

    removeAccount(number_account:String!):Int!

    addAccountByAccessToken: Account!
    addAccountByUser(input: addAccountInput): Account!

    makeTransfer(input: TransferInput!): TransferResult!

    
  }

  type LogoutResponse {
    message: String!  
  }



type Transaction {
  operation: String!
  import: Float!
  create_date:Date
}


  scalar Date

  input DictionaryInput {
  encrypt_message: String!
  account: String!
  create_date: Date
}



  type Dictionary {
    encrypt_message: String!
    account: String!
    create_date: Date
  }


  type Address {
    street: String!
    city: String!
  }

  type Person {
    name: String!
    phone: Int!
    address: Address!
  }

  type Account {
    owner_dni: String!
    owner_name: String!
    number_account: String!
    balance: Float!
    active: Boolean!
    key_to_pay: String!
    maximum_amount_once: Float!
    maximun_amount_day: Float!
    description: String!
}
    
  


  type User {
    dni: String!
    name: String!
    password: String!
    accounts: [Account]
  }


  type Token {
    value: String!
  }

  type AuthToken {
    access_token: String!
    user: User!
  }

  input TransferInput {
    accountOrigen: String!
    accountDestin: String!
    import: Float!
  }

  type TransferResult {
    success: Boolean!
    message: String
  }


  input addAccountInput{
    owner_dni: String!
    owner_name: String!
  }
  
  input RegisterInput{
    name: String!
    password: String!
  }
  
  input SignUpInput {
    dni: String
    name: String
    password: String
  }

  input LoginInput {
    name: String!
    password: String!
  }

  input AddNewAdminInput {
  dni: String!
  name: String!
  password: String!
  role: String
}

  input TransactionInput {
  operation: String!
  import: Float!
  accountNumber: String! 
  }







