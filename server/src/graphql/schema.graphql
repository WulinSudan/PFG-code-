  
type Query {
    # User information
    me: User
    getUserInfo(dni: String!): User
    getUserName: User
    getUserRole(name: String!): String
    getUserStatusDni(dni:String!):Boolean!
    getUserStatus:Boolean!
    getRole: String!
    getAdmins: [User]!
    getUsers: [User]!
    users: [User]
    isRemoveble(dni: String!): Boolean!
    
    
    # Person information
    personCount: Int!
    allPersons: [Person]!
    findPerson(name: String!): Person
    
    # Account information
    allAccount: [Account]!
    countAccount: Int!
    getAllAccounts: [Account]
    getUserAccountCount(dni: String!): Int!
    getUserAccounts: [Account]
    getUserAccountsInfoByDni(dni: String!): [Account]
    findAccount(accountNumber: String!): Account
    
    # Transaction information
    getAccountTransactions(n_account: String!): [Transaction]
    getTransactions: [Transaction]
    
    # Specific account information
    getAccountPayKey(accountNumber: String!): String!
    getMaxPayDay(accountNumber: String!): Int!
    getAccountBalance(accountNumber: String!): Float!
    getAccountStatus(accountNumber: String!): Boolean!
    getUser(accountNumber: String!): User
    getOrigenAccount(qrtext: String!): String
    
    # Verification functions
    checkEnable(qrtext: String!): Boolean!
    checkEnableAmount(amount: Float, accountNumber: String): Boolean!
    
    # Additional information
    getLogs(dni: String): [String]
}


type Mutation {
    # User password management
    setPassword(new: String, dni: String): Boolean!
    changePassword(old: String, new: String): Boolean!
    
    # User and account status management
    changeUserStatus(dni: String!): Boolean!
    changeAccountStatus(accountNumber: String!): Boolean!
    
    # Transaction management
    addTransaction(input: TransactionInput!): Transaction!
    
    # QR code management
    setQrUsed(qrtext: String!): Boolean!
    
    # Account settings and updates
    setMaxPayImport(accountNumber: String!, maxImport: Float!): Float!
    setAccountDescription(accountNumber: String!, description: String!): String!
    setNewKey(accountNumber: String!): String!
    
    # User authentication and management
    signUp(input: SignUpInput!): User!
    signUpAdmin(input: SignUpInput!): User!
    loginUser(input: LoginInput!): AuthToken!
    
    # User and person management
    removeUser(dni: String!): Int!
    addNewAdmin(input: AddNewAdminInput!): Admin!
    addPerson(name: String!, phone: Int!, street: String!, city: String!): Person!
    editNumber(name: String!, phone: Int!): Person
    removePerson(name: String!): Int!
    
    # Account management
    removeAccount(number_account: String!): Int!
    addAccountByAccessToken: Account!
    addAccountByUser(input: addAccountInput): Account!
    
    # Transfer management
    makeTransfer(input: TransferInput!): TransferResult!
    
    # Dictionary management
    addDictionary(input: DictionaryInput!): Dictionary!
}


# Represents a transaction with balance, operation details, and creation date
type Transaction {
    balance: Float!
    operation: String!
    import: Float!
    create_date: Date
}

# Scalar type for Date
scalar Date

# Represents a dictionary entry with encryption message, account, and creation date
type Dictionary {
    encrypt_message: String!
    account: String!
    create_date: Date
}

# Represents an address with street and city
type Address {
    street: String!
    city: String!
}

# Represents a person with name, phone, and address
type Person {
    name: String!
    phone: Int!
    address: Address!
}

# Represents an account with owner details, balance, status, and other attributes
type Account {
    owner_dni: String!
    owner_name: String!
    number_account: String!
    balance: Float!
    active: Boolean!
    key_to_pay: String!
    maximum_amount_once: Float!
    maximun_amount_day: Float!
    description: String!
}

# Represents an admin with dni, name, password, and status
type Admin {
    dni: String!
    name: String!
    password: String!
    active: Boolean!
}

# Represents a user with dni, name, password, status, and associated accounts
type User {
    dni: String!
    name: String!
    password: String!
    active: Boolean!
    accounts: [Account]
}

# Represents a token used for authentication
type Token {
    value: String!
}

# Represents an authentication token along with the user information
type AuthToken {
    access_token: String!
    user: User!
}

# Represents the result of a transfer operation indicating success or failure
type TransferResult {
    success: Boolean!
    message: String
}

# Input type for creating or updating a transaction
input TransactionInput {
    operation: String!
    import: Float!
    accountNumber: String!
    balance: Float!
}

# Input type for making a transfer between accounts
input TransferInput {
    accountOrigen: String!
    accountDestin: String!
    import: Float!
}

# Input type for adding or updating a dictionary entry
input DictionaryInput {
    encrypt_message: String!
    account: String!
    create_date: Date
}

# Input type for registering a user or admin
input RegisterInput {
    name: String!
    password: String!
}

# Input type for signing up a user or admin
input SignUpInput {
    dni: String
    name: String
    password: String
}

# Input type for logging in a user
input LoginInput {
    name: String!
    password: String!
}

# Input type for adding a new admin
input AddNewAdminInput {
    dni: String!
    name: String!
    password: String!
}

# Input type for adding a new account by user
input addAccountInput {
    owner_dni: String!
    owner_name: String!
}







